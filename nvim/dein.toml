[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_open_list = 1
let g:ale_echo_msg_format = '[%linter%][%severity%][%code%] %s'
let g:ale_sign_column_always = 1
let g:ale_completion_enabled = 0
let g:ale_fix_on_save = 1
let g:ale_fix_on_insert_leave = 1
let g:ale_linters = {
  \ 'python': ['pylint', 'flake8'],
  \ 'go': ['gofmt', 'govet', 'bingo'],
  \ 'javascript':  ['tsserver', 'eslint'],
  \ 'javascript.jsx':  ['tsserver', 'eslint'],
  \ 'typescript':  ['tsserver', 'eslint'],
  \ 'typescript.tsx':  ['tsserver', 'eslint'],
  \}
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'python': ['autopep8', 'isort'],
  \ 'javascript': ['eslint'],
  \ 'javascript.jsx': ['eslint'],
  \ 'typescript': ['eslint'],
  \ 'typescript.tsx': ['eslint'],
  \ 'go': ['gofmt'],
  \}
let g:ale_python_pylint_change_directory = 0
let g:ale_pattern_options = {
  \ '\.eslintrc.js$': {'ale_enabled': 0},
  \ '\.md$': {'ale_enabled': 0},
  \ 'node_modules/.*$': {'ale_enabled': 0},
  \ 'dist/.*$': {'ale_enabled': 0},
  \}
nnoremap <silent> <S-f> :<C-u>ALEFix<CR>
nnoremap <silent> <C-p> :<C-u>ALEPreviousWrap<CR>
nnoremap <silent> <C-n> :<C-u>ALENextWrap<CR>
hi ALEError cterm=bold ctermfg=white ctermbg=red
'''


[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'yarn install --frozen-lockfile'
merge = 0
hook_add = '''
nnoremap [lsp] <Nop>
nmap ,s [lsp]
vmap ,s [lsp]
nmap [lsp]i <Plug>(coc-implementation)
nmap [lsp]d <Plug>(coc-definition)
nmap [lsp]r <Plug>(coc-references)
nmap [lsp]t <Plug>(coc-type-definition)
nmap [lsp]R <Plug>(coc-rename)
nmap [lsp]p <Plug>(coc-diagnostic-prev)
nmap [lsp]n <Plug>(coc-diagnostic-next)
nmap [lsp]f <Plug>(coc-format-selected)
vmap [lsp]f <Plug>(coc-format-selected)
nnoremap <silent> [lsp]s :call <SID>show_documentation()<CR>
inoremap <silent><expr> <c-c> coc#refresh()
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
augroup coc
  autocmd!
  autocmd CursorHold * silent call CocActionAsync('highlight')
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup END
let g:coc_global_extensions = ["coc-json", "coc-python", "coc-emoji", "coc-tsserver"]
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:vim_markdown_fenced_languages = ["go", "js=javascript", "ts=typescript", "coffee", "py=python", "rb=ruby", "yaml", "toml"]
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:typescript_indent_disable = 0
let g:vim_json_syntax_conceal = 0
let g:jsx_ext_required = 1
'''

# 統合インターファイス
[[plugins]]
repo = 'Shougo/unite.vim'

# unite拡張
[[plugins]]
repo = 'Shougo/neomru.vim'
hook_add = '''
" 入力モードで開始する
let g:unite_enable_start_insert=0

nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
nnoremap sn gt
nnoremap sp gT
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=

" window size
nnoremap s> <C-w>>
nnoremap s< <C-w><
nnoremap s+ <C-w>+
nnoremap s- <C-w>-

nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
" バッファ一覧
nnoremap sb :<C-u>Unite buffer<CR>
" 現在のディレクトリのファイル一覧
nnoremap sf :<C-u>Unite -buffer-name=file file<CR>
" 最近使ったファイル一覧
nnoremap sz :<C-u>Unite file_mru<CR>

nnoremap nt :<C-u>NERDTree<CR>

"" ESCキーを2回押すと終了する
"au FileType unite nmap <silent> <buffer> <ESC><ESC> :q<CR>
"au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
'''

# 木表示
[[plugins]]
repo = 'scrooloose/nerdtree'

# airline themes
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# icon表示
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_theme = 'dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'

set laststatus=2
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
let g:airline_section_c = '%t'
let g:airline_section_x = '%{&filetype}'
let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
let g:airline#extensions#ale#error_symbol = ' '
let g:airline#extensions#ale#warning_symbol = ' '
let g:airline#extensions#default#section_truncate_width = {}
let g:airline#extensions#whitespace#enabled = 1
'''

# vim内git
[[plugins]]
repo = 'tpope/vim-fugitive'

# 差分自動表示
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'rhysd/vim-operator-surround'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
